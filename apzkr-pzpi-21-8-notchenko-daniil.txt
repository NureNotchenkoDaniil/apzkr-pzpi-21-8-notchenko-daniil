ВСТУП

Метою цієї курсової роботи є розробка системи моніторінгу документації та стану здоров'я тварин, з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів. Система буде спрямована на надання можливості власникам тварин та робітникам чиї професії пов'язані з обслуговуванням тварин прискорити та спростити свою роботу з документами тварин та уникнути можливості підробки документів тварин завдяки цифровому обліку.
На даний момент приблизно кожна друга сім'я має домашніх тварин, та постійно відвідують з ними ветеринарів, як у профілактичних цілях так і при захворюваннях тварин. Проте приблизний процент вакцинованих тварин у світі становить лише 30-50%, що не є задовільним показником, ця система також націлена на спрощення процессу проходження вакцинації та перевірки інформації чи проходила тварина вакцинацію, а також запобіганню підробки документів про вакцинацію тварини.
Розроблена система включає у себе програмну та апаратні частини. Апаратна система включатеме чип який буде закріплятися за кожною твариною та містити інформацію про неї яка буде автоматично підвантажуватись із сервера при скануванні чипа. Клієнтська частина включає веб-додаток, що надає можливість користувачам, ветеринарам, держслужбовцям та адміністаторам переглядати документи тварин та працювати з ними, та серверну частину для роботи з даними з сервера та зберігання їх на сервері.
Під час виконання курсової роботи було розроблено програмну систему, яка надає можливість зручно та швидко працювати з документами тварин, їх медичними кардками та інформацієї про вакцинацію. Користувачі можуть додавати та переглядати профілі власних тварин, держслужбовці переглядати інформацію про всіх існуючих у системі тварин, ветеринари можуть працювати з історіями хвороби тварин та їх статусами вакцинації, а адміністратори можуть управляти користувачами, типами тварин та створювати резервні копії.
Програмна система була розроблена засобами Python FastAPI, MySQL, Vue.js, C++, Java, що дозволяють створити зручну, швидку, надійну та ефективну систему з достатнім рівнем безпеки.

1	BUSINESS REQUIREMENTS (БІЗНЕС-ВИМОГИ)

1.1 Background (передумови)


Сьогодні у дуже великого процента населення є домашні тварини, і у сучасному суспільстві на будь-яких домашніх тварин необхідно мати певний список документів, які є необхідними для транспортування, обслуговування та лікування тварин. Без ветеринарного паспорту та документів про зчеплення тварину не пропустять на кордоні будь-якої країни, а у деяких країнах перелік необхідних документів є ще більшим, до нього додаються ідентифікаційні документи, сертифікати здоров’я. Якщо тварина є екзотичною то необхідні ще певні ліцензії на володіння такою. У деяких окремих випадках можуть бути необхідними додаткові документи по типу декларацій та тощо.
У нашій країні розроблено то успішно впроваджено електронний реєстр документів «Дія», що значно спростив та прискорив роботу з документами людини, тому метою програмної системи моніторингу документації та стану здоров’я тварин є перейняти успішний досвід створення реєстру документів людини та спроектувати таку систему для тварин.
Система наддасть можливість прискорити роботу з документами тварин у всіх сферах де це є необхідним: при роботі прикордонників з перевірки документів, при візитах до ветеринарних клінік, надаючи ветеринарам можливість швидко та зручно переглядати зчеплення, стан здоров’я та інформацію про попередні візити, тощо.
	Також електронний реєстр наддасть можливість запобігти підробці документів пов’язаних з тваринами, бо ситуація з підробками довідок про зчеплення є досить розповсюдженою проблемою.


1.2	Business Opportunity (Бізнес-можливості)


Розглянемо найбільш відомі аналоги нашого проекту на даний час. Працездатний та доступний для громадян аналог це лише Українська «Дія», але вона стосується лише документів людини, також у США та Австралії є схожі системи «NAIS» (National Animal Identification System) та «AHWIS» (Animal Heals and Welfare Information System), але вона стосується управляння скотом для фермерів, а не всіх тварин.
 	Найбільш приближеною по функціоналу до ідеї проекту є «Дія», вона надає можливість громадянам швидко працювати зі своїми документами та державними послугами: перегляд особистих документів, створення довідок та витягів, сплачення податків та штрафів, опитування та судові послуги, тощо. У цілому, дія спрощує взаємодію громадянина та держави, робить цей процес більш зручним, прозорим та ефективним. Але саме стосовно тематики тварин у Дії немає функціоналу та послуг.
Схожою по тематиці є система «NAIS» у США, але вона надає можливість керувати документами та відстежувати положення лише тварин фермерського типу, не надаючи можливість керувати даними звичайних домашніх тварин.
Така сама ситуація з  «AHWIS», ідея системи схожа, але функціонал стосується фермерських тварин та доступний для державних службовців, а не для рядового користувача.
Усі визначені аналоги пропонують або схожий функціонал у іншій тематиці, або обмежений та не загальнодоступний функціонал у схожий по тематиці, що робить їх не придатними для використання для задач які вирішує наша програмна система.
Майбутня модель монетизації включає у себе фінансування та підтримку проекту з боку держави, а також інтегрування та співпраця з ветеринарними кініками.
Даний програмний продукт розрахований на сектор державних послуг, та спрощення взаємодії власників тварин та державних органів пов’язаних з ними. Ця галузь є перспективною, оскільки спрощує життя власникам тварин та не має працездатних аналогів у світі, документообіг та контролювання стану здоров’я тварин є актуальним для власників у будь-який час незалежно від криз та світових подій.


1.3	Business Objectives and Success Criteria (Бізнес-цілі та критерії успіху)


Бізнес-ціль 1: Надання зручного та ефективного способу реєстрації та ідентифікації тварин для їх власників.
Бізнес-ціль 2: Розширення присутності на ринку на країни Євро Союзу з інтегруванням європейського Pet Passport.
Бізнес-ціль 3: Надання функцій для відстеження здоров’я, вакцинацій, медичних процедур та інших аспектів догляду тварин.
Бізнес-ціль 4: Створення бази даних тварин, яка може використовуватись для статистичного аналізу, дослідженні здоров’я тварин, а також стратегій управління популяціями тварин.
Критерій успіху 1: Висока активність користувачів різних типів (власники, ветеринари, державні службовці) у додатку, велика кількість завантажень та реєстрацій.
Критерій успіху 2: Високий рівень залученості державних органів країн де використовується система, інтеграція з їх системами.
Критерій успіху 3: Ефективність використання системи: скорочення очікування перевірок документів, покращення доступності медичних послуг, зниження рівня підроблювання документів.


1.4	Customer or Market Needs (Потреби клієнтів або ринку)


Необхідність зручного та швидкого реєстру документів тварин:
-	Клієнти, такі як власники тварин, ветеринари та державні службовці, потребують системи, яка спростить роботу з документами тварини, забезпечить швидкість та зручність документообігу.
Безпека та конфіденційність:
-	Клієнти вимагають систему, яка забезпечить безпеку та конфіденційність документів тварин, вилучить можливість підробок.
Інтеграція з існуючими системами: 
-	Ринок потребує систем, які можуть легко інтегруватися з існуючими реєстрами документів тварин та ветеринарними клініками.

	

1.5	Business Risks (Бізнес-ризики)


Представимо бізнес ризики у вигляді таблиці 1.1:
Таблиця 1.1 – Бізнес-ризики
Ризики	Суворість	Пом’якшення
Втрата даних або порушення конфіденційності 	Висока	Регулярні резервні копії даних, дотримування відповідних нормативних вимог щодо захисту даних, застосування систем аутентикації та авторизації
Незадоволення користувачів продуктом через непридатність системи до вимог ринку або недостатню якість моніторингу показників здоров’я	Середня	Ретельний аналіз  вимог користувачів системи, регулярне тестування та обслуговування програмної системи
Зміни в законодавстві	Середня	Постійне оновлення знань щодо вимог законодавства, співпраця з фахівцями з правових питань для оцінки та впровадження необхідних змін
Проблеми з інтеграцією з державними реєстрами деяких країн	Висока	Розробка стандартизованих форматів даних та протоколів обміну інформацією, які будуть відповідати вимогам різних державних реєстрів.

 
2	VISION OF THE SOLUTION (КОНЦЕПЦІЯ РІШЕННЯ)
2.1 Vision Statement (Окреслення концепції)


Програмна система для моніторингу документації та стану здоров’я тварин необхідна, тому що Україна та інші країни потребують систему яка об’єднає власників тварин, ветеринарів та державні органи для зручного та ефективного управління документацією тварин, їх здоров’я, вакцинації та медичні процедури.
Впровадження моніторингу документації та стану здоров’я тварин надасть можливість прискорити роботу з документами тварини як для власників так і для держ. службовців, та створить можливість стандартизувати документообіг тварин у електронному форматі для всього світу. Крім того, система надасть можливість зручно записувати результати прийомів тварин у ветеринарів та переглядати історію хвороб та зчеплень, що зробить лікування тварин більш зручним та доступним. Створення такої бази також надає можливість збирати данні про характеристики, хвороби та поведінку тварин, для подальшого аналізу в області ветеринарії та зоології. Така система може також надавати освітні матеріали, статті та іншу інформацію, яка допоможе власникам правильно доглядати своїх вихованців.
Також електронний реєстр надасть можливість уникнути паперових підробок сертифікатів, ліцензій та документів про зчеплення, що зменшить корупцію у цій сфері, та захистить людей та тварин від хвороб виникаючих через це. Це також буде контролюватися IoT чіпом який буде вживлятися тваринам та фіксувати візити до лікарів та зчеплення.


2.2 Major Features (Головна функціональність) 


Наведемо головну функціональність програмного продукту:
MF-1: Реєстрація та авторизація користувачів у веб-застосунку.
MF-2: Створення та редагування профілів тварин які належать користувачу.
MF-3: Можливість перегляду медичної історії кожної тварини, включаючи інформацію про медичні процедури, вакцинації, ліки та інші медичні події.
MF-4: Запис на візити до ветеринарного лікаря або клінік в онлайн-режимі.
MF-5: Ведення ветеринарами медичних карток тварин.
MF-6: Можливість швидкої перевірки документів держслужбовцями.
MF-7: Можливість автоматичного обміну даними з державними реєстрами тварин, для забезпечення актуальної інформації та виконання вимог законодавства.
MF-8: Можливість інтеграції та вживляння тварині IoT чіпу який фіксує візити до лікаря, зчеплення та інші медичні процедури, та вносить цю інформацію в профіль тварини.

 
2.3	 Assumption and Dependencies (Припущення та залежності)


Залежності (Dependencies)
-	Користувачі системи після реєстрації та першої авторизації мають спочатку створити профілі своїх домашніх тварин та заповнити інформацію про них.
-	Користувачі мають стабільний доступ до інтернету на пристроях які використовують для роботи з системою.
-	Користувачі системи мають вживити та налаштувати IoT чип.

Припущення (Assumptions):
-	Користувачі системи мають доступ до браузерів Google Chrome, Opera,  Firefox, Safari та стабільний доступ до інтернету.
-	Користувачі системи мають мобільні пристрої з версією Android 8 та вище, або IOS 15 та вище.
-	Кожен чип необхідно налаштувати перед вживленням тварині.



3	SCOPE AND LIMITATIONS (РАМКИ ТА ОБМЕЖЕННЯ ПРОЕКТУ)
3.1	 Scope of Initial Release (Рамки первинного випуску)


Клієнтська частина:
-	форма реєстрації та авторизації для нових користувачів;
-	можливість змінювати локалізацію;
-	надання доступу до системи різним користувачам та визначення їх прав відповідно до ролей та обов’язків;
-	можливість створення профілів тварин;
-	можливість пошуку профілів тварин;
-	можливість редагування та додавання інформації для профілів тварин;
-	можливість ведення історії хвороби тварин;
-	можливість збереження інформації про зчеплення тварин.
Серверна частина:
-	автоматичне хешування паролів;
-	встановлення ролі відповідно до користувача;
-	додавання, редагування та видалення ветеринарних клінік;
-	додавання, редагування та видалення профілів користувачів;
-	зв’язування чипів з профілями тварин.
Мобільний застосунок:
-	створення профілю користувача та профілів тварин;
-	відображення профілю та історії хвороби тварин;
-	відображення інформації про зчеплення тварин;
-	сповіщення про наближення запланованих подій пов’язаних з твариною;

IoT частина:
-	зв’язка з профілем тварини;
-	додання інформації про виконане зчеплення тварини. 

3.2	 Scope of subsequent Releases (Рамки наступних релізів)


У веб-застосунку користувачі матимуть можливість:
-	можливість поєднання профілів тварин з державними реєстрами;
-	переглядати місцеположення тварин через трекер у нових версіях чипа;
Адміністратор матиме можливість:
-	надавати технічну підтримку користувачам системи;
У mobile-застосунку користувачі матимуть можливість:
-	переглядати місцеположення тварин через трекер у нових версіях чипа та перенесення координат на карти;
-	створення qr-коду для перевірки тварини по державних реестрах.
  

3.3	Limitations and exclusions (Обмеження та вийнятки)


Далі наведено можливі обмеження та вийнятки, які будуть включені до системи:
-	програмна система для моніторингу документації та стану здоров’я тварин може вимагати безперебійного джерела живлення та стабільного доступу до інтернету;
-	оновлення даних на серверах можуть відбуватись з затримкою, що залежить від часу передачі даних та стабільності зв’язку;
-	належність до певних регіонів або країн у майбутньому при масштабуванні системи може призвести до обмежень у використанні.


4	BUSINESS CONTEXT (БІЗНЕС-КОНТЕКСТ)
4.1	Stakeholder Profiles (Профілі зацікавлених сторін)



На таблиці 4.1 наведемо профілі зацікавлених сторін.

Таблиця 4.1 – Профілі зацікавлених сторін
Зацікавлена сторона	Головна цінність	Ставлення 	Головний інтерес	Обмеження
Власники домашніх тварин	Зручний доступ до документів, мед. карти тварини та зручний запис до вет. клінік 	Розглянуть продукт як зручну систему для керування документів своїх тварин	Зручний додаток який прискорює роботу з документами тварини та її здоров’ям 	Спроможність правильно користуватися додатком та доступ до інтернету
Ветеринари та мед. персонал ветеринарних клінік	Зручний доступ до мед. картки тварини та інформації про її зчеплення	Розглянуть продукт як зручну систему для роботи з мед. картою тварини та інформацією про її зчеплення	Зручний додаток який прискорює роботу з мед. картою та інформацією про зчеплення тварини	Доступ до інтернету та наявність клініки у базі додатку для надання доступу до мед. карти
Державні службовці	Зручний доступ до документів та інформації про зчеплення тварин та виключення можливості підробки документів	Розглянуть продукт як зручну систему для перевірки та роботи з документами тварини, уникнення підробки документів	Зручний додаток який прискорює роботу з документами тварини та виключає можливість підробки	Доступ до інтернету та синхронізація державних реєстрів з системою



4.2 Project Priorities (Пріоритети проекту)


На таблиці 4.2 наведемо пріоритети проекту:

Таблиця 4.2 – Пріоритети проекту
Показник	Виконання (етапи)	Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)
План робіт	Реліз 1.0	Терміни виконання	Можливе відхилення від графіку на 1-1,5 місяців
Функціональність	Реліз 1.0	Необхідні функції	70 - 80% із високим пріоритетом мають бути включені до релізу 1.0.
Якість	Реліз 1.0	Мінімум помилок	100 % прийнятих тестів для користувача повинні пройти для випуску 1.0.
Персонал	Реліз 1.0	Команда складається з 1 розробника та адміністратора системи	
Ціна	Реліз 1.0	Обмеження бюджету	Допустимо перевищити бюджет на 15% без перегляду роботи


 
4.3	 Operating Environment (Робоче середовище)


Програмний продукт буде розроблено з використанням наступних технологій:
-	Frontend: JavaScript (Vue.js, Bootstrap 5);
-	Backend: Python FastAPI;
-	Mobile: Java (Android sdk);
-	IoT: C++ (Arduino UNO r3, MFRC522, ESP8226).
В якості системи управління базами даних буде використовуватися MySQL.
Програмний продукт має бути доступним, зручним, зрозумілим та ефективним у користуванні як для досвідчених, так і не досвідчених користувачів. Програмна система має бути здатною до управління великою кількістю запитів і користувачів одночасно. Для більшості взаємодій із користувачем час відгуку не має перевищувати 1 - 1,5 секунди. Програмна система має бути створена з дотриманням суворих вимог щодо захисту даних та контролю доступу. Дані користувачів повинні бути захищені від несанкціонованого доступу, а система повинна забезпечувати безпечний доступ до бази даних з віддалених місць. 

СЕРВЕРНА ЧАСИНА

1	Діаграма розгортання


	Для створення серверної частини проекту було використано мову програмування Python разом з фреймворком FastAPI. 
	Для зв’язку з базою даних, створення моделей та зв’язків між таблицями було обрано Tortoise ORM. Tortoise ORM є зручним інструментом для роботи з базами даних, бо надає простий та інтуїтивний спосіб взаємодії через об’єктно-реляційну модель. Він має підтримку асинхронної роботи працює з різними СУБД, зокрема з використаною у проекті MySQL, та автоматично генерує SQL-запити на основі визначень моделей, що забезпечує високий рівень надійності та продуктивності при роботі з базою даних.
	Для створення токенів авторизації та шифрування паролів було використано JSON Web Token, який є компактним та досить безпечним варіантом передачі інформації між сторонами за допомогою JSON-об’єктів. Це дозволяє генерувати, перевіряти токени авторизації та забезпечує шифрування паролів користувачів системи.
	Проект розділено на три шари:
-	User Interface – конфігурація та запити, через які користувач взаємодіє з API.
-	Бізнес-логіка – моделі даних та обробка даних.
-	Доступ до даних – створення таблиць бази даних, міграція та взаємодія із сервером.
Deployment Diagram(Діаграма розгортання) зображено у додатку А на рисунку А.1.
 
2	Діангама прецедентів


	Діаграма прецедентів для архітектури системи зображена на рисунку Б.1 у додатку Б. На діаграмі зображено, що у системі є користувачі з різними ролями: адміністратор має змогу управляти даними про типи тварин, переглядати усі данні про тварин та створювати резервні копії бази даних, ветеринар має можливість управляти історіями хвороби тварин, статусом їх вакцинації та має можливість переглядати інформацію про всіх тварин. Держслужбовець має можливість отримувати всю інформацію про тварин.
	Користувач має можливість зареєструватися, увійти в систему, створювати та видаляти профілі своїх тварин, переглядати всю інформацію про власних тварин. Приклад контролера для створення нового профілю тварини наведено у додатку Ж.
 
3 ER-модель даних


У додатку В на рисунку В.1 зображено ER-модель даних. Для розробки програмного продукту було використано реляційну базу даних MySQL. В процесі реалізації бази було створено такі таблиці:
-	Users(Таблиця з даними про користувачів);
-	Role(Таблиця з даними про ролі користувачів);
-	Pet(Таблиця з даними домашніх тварин);
-	PetType(Таблиця з даними про типи тварин);
-	StoryOfDisease(Таблиця з даними історії хвороби тварин та датами візитів до клінік).
Реалізовано наступні відношення між таблицями:
-	Користувач може мати декілька ролей через один зв’язок з таблицею ролей;
-	В одного користувача може бути багато домашніх тварин;
-	У кожної тварини може бути одна або декілька історій хвороби;
-	Кожна тварина може мати лише один тип тварини.
 
4 Діаграма діяльності


	У додатку Г на рисунку Г.1 зображено діаграму діяльності звичайного користувача, на якій продемонстровано процес додавання користувачем нової тварини та перевірки усіх своїх домашніх тварин. Спочатку користувач проходить процес авторизації, після чого має можливість перевірити вже зареєстрованих їм тварин та їх історії хвороби. Наступним кроком користувач має змогу додати нову тварину, заповнивши інформацію про неї та обравши тип тварини та знову перевірити список своїх тварин та їх історії хвороби. Також користувач може видалити вже існуючий профіль власної тварини.
 
5 REST специфікація


	При написанні серверної частини додатку було дотримано принципів REST. Така архітектура визначає, яким чином має бути організована система для можливості її масштабування та простоти інтеграції з різними компонентами. REST специфікація наведена у таблиці 1.

Таблиця 1 – REST-специфікація
Назва	Метод	Шлях	Тіло запиту
Registration	POST	api/register	{
“username”: ”string”,
“email”: ”string”,
“password”: ”string”,
“joined_date”: ”datetime”
}
Authorization	POST	api/token	{
“username”: ”string”,
“password”: ”string”
}
User Profile	POST	api/user/me	-
Create New Pet	POST	api/pets	{
“pet_name”: ”string”,
“pet_type”: int,
“breed”: ”string”,
“vaccinated”: bool
}
Create Disease Story	POST	api/disease_story	{
“first_visit_date”: “date”,
“last_visit_date”: “date”,
“medications”: “string”,
“pet”: int
}
Create Pet Type	POST	api/admin/pet_type	{
“type_name”: “string”
}
Backup Database	POST	api/admin/backup	-
Index(API launch check)	GET	api/	-
Show Pets	GET	api/pets	-
Show Specific Pet	GET	api/pets/{id}	-
Show Disease Stories	GET	api/disease_story	-
Show Specific  Disease Story	GET	api/disease_story/{id}	-
Delete Pet	DELETE	api/ pets/{id}	-
Delete Disease Story	DELETE	api/disease_story/{id}	-
Delete Pet Type	DELETE	api/admin/pet_type/{id}	-
Update Pet Vaccination	PUT	api/pets/{id}/vaccination	{
“vaccinated”: bool}
Update Disease Story	PUT	api/disease_story/{id}	{
“first_visit_date”: “date”,
“last_visit_date”: “date”,
“medications”: “string”
}

 
6 Архітектура серверної частини


	Схематичне зображення структури серверу зображено у додатку Д на рисунку Д.1. Для реалізації архітектури серверу було використано стандартну спрощену архітектуру проекту FastAPI. У файлі Models містяться моделі та зв’язки між таблицями.
	У файлі Main містяться контролери, підключення до бази даних, налаштування CORS(Cross-Origin Resourse Sharing) для дозволу запитів з певних доменів, підключення CROS Middleware для налаштування політик безпеки, механізм резервного копіювання, підключення обробників винятків для Tortoise ORM.
	У файлі Authentication знаходяться контекст криптографії з використанням бібліотеки CryptContext для хешування паролів за допомогою bcrypt, завантаження конфігураційних параметрів з файлу “.env”, функції для хешування та перевірки пароля, асинхронна функція для аутентифікації користувача за логіном та паролем, асинхронна функція для генерації JWT токену після успішної аутентифікації та асинхронна функція верифікації токену і отримання користувача з бази даних.
	Файл .env використовується  для зберігання конфігураційних параметрів, таких як підключення до бази даних.

КЛІЄНТСЬКА ЧАСТИНА

1 Діаграма прецедентів


	На рисунку А.1 у додатку А зображено діаграму прецедентів для клієнтської частини системи «I-Pet». На діаграмі зображено можливості всіх існуючих типів користувачів, таких як звичайні користувачі, ветеринари, держслужбовці та адміністратори системи.
	На діаграмі можна побачити що користувач може авторизуватися або зареєструватися, переглянути особистий профіль, створити новий профіль тварини, переглянути профілі власних тварин, видалити профіль тварини, переглянути історії хвороби своїх тварин. Ветеринар може авторизуватися, створити нову історію хвороби тварини, переглянути профілі всіх тварин, редагувати статус вакцинації тварин, переглядати історії хвороби всіх тварин, шукати певну історію хвороби, редагувати та видаляти історії хвороби. Держслужбовець може авторизуватися, переглядати всі профілі тварин та історії хвороби та шукати певні профілі та історії. Адміністратор може авторизуватися, переглядати та виконувати пошук усіх профілів тварин та історій хвороби, переглядати список усіх користувачів та блокувати і розблоковувати їх, створювати та видаляти типи тварин та створювати резервні копії бази даних.
 
2 Діаграма компонентів


	У додатку Б на рисунку Б.1 зображена діаграма компонентів. На діаграмі можна побачити побудову взаємодії між компонентами програмної системи: клієнтською частиною та серверною. На діаграмі видно, що клієнтська частина містить основні компоненти: AdminPage, HomePege, NavBar, PetsPage, ProfilePage, SpecificPetPage, SignInPage, SingUpPage, CreateNewPetPage, CreateDeseasePage. Через ці компоненти відбувається взаємодія з серверною частиною, а також на діаграмі видно основний компонент App.js, який відповідає за відображення компонентів та маршрутизацію.
 
3 Діаграма взаємодії


	У додатку В на рисунку В.1 зображено діаграму взаємодії для процессу створення нового профілю тварини. На діаграмі видно що спочатку користувачу необхідно пройти процес авторизації, далі він має створити новий профіль тварини, заповнивши основні дані про тварину. Після створення профілю тварини користувач має можливість переглянути існуючи профілі власних тварин у вигляді форм та видалити профіль певної тварини.
 
4 Діаграма станів


	У додатку Г на рисунку Г.1 зображено діаграму станів клієнтської частини програмної системи «I-Pet», на діаграмі зображено процес роботи користувача із системою. На діаграмі видно, що спочатку користувачу необхідно пройти процес авторизації, після чого користувач може перейти на сторінки перегляду профілів тварин, перегляду власного профілю та створення нового профілю тварини. При переході до сторінки перегляду профілів тварин користувач також може видаляти певні профілі.
 
5 Архітектура клієнтської частини

	Для архітектури клієнтської частини програмної системи було використано стандартну архітектуру проектів з використанням Vue.js, де створюються кореневі директорії src та public, файли App.js, main.js, package.json. Також у середині деректорії src було створено дерикторією components для зберігання компонентів програмної системи.
	У додатку Д на рисунку Д.1 зображено структуру клієнтської частини програмної системи «I-Pet». На рисунку можна побачити, що головною дирикторією є src, в середині неї є дериткорія components у якій зберігаються всі компоненти системи. Також у дерикторії src зберігаються locales.js, що відповідає за локалізацію завдяки використанню бібліотеки i18n, router.js, що відповідає за маршрутизацію, код роутера наведено у додатку Ж, та axios.js, що відповідаю за використання axios для роботи з API завдяки використанню бібліотеки Axios. Приклади компонентів наведено у додатку Е.

ВИСНОВКИ

У ході виконання курсової роботи була розроблена програмна система "I-Pet", яка призначена для моніторінгу документації та стану здоров'я тварин, з метою створення єдиного цифрового реєстру тварин та запобіганню підробок документів. Основна мета проекту була забезпечення зручного, швидкого та безпечного способу роботи роботи з документацією тварин а також інформацією про їх стан здоров'я та наявність вакцинації. Основними типами користувачів стали власники тварин, держслужбовці, ветеринари та адміністратори. Користувачі можуть створювати проіфлі тварин, переглядати інформацію про власних тварин, їх історію хвороби, статус вакцинації. Держслуждовці мають доступ до усієї документації всіх тварин. Ветеринари можуть вести історії хвороби тварин та управляти їх статустом вакцинації.
Розроблена система дозволяє прискорити та спростити документообіг тварин, їх історій хвороб та інформації про вакцінацію.
Завдяки використанню таких технологій як Python FastAPI, MySQL, Vue.js, C++, Java для розробки клієнтської, серверної та IoT частин, вдалось створити надійну, маштабовану та гнучку систему.
Посиланн на репозиторій GitHub:
https://github.com/NureNotchenkoDaniil/apzkr-pzpi-21-8-notchenko-daniil
Посилання на функціональне тестування програмної системи:
